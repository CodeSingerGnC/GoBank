// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: passcode.sql

package db

import (
	"context"
	"database/sql"
)

const addOtpsecretTryTime = `-- name: AddOtpsecretTryTime :exec
UPDATE otpsecrets
SET tried_times = tried_times + 1
WHERE email = ?
`

func (q *Queries) AddOtpsecretTryTime(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, addOtpsecretTryTime, email)
	return err
}

const createOtpsecret = `-- name: CreateOtpsecret :execresult
INSERT INTO otpsecrets (
    email, secret
)  VALUES (
    ?, ?
)
`

type CreateOtpsecretParams struct {
	Email  string `json:"email"`
	Secret string `json:"secret"`
}

func (q *Queries) CreateOtpsecret(ctx context.Context, arg CreateOtpsecretParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createOtpsecret, arg.Email, arg.Secret)
}

const deleteOtpsecret = `-- name: DeleteOtpsecret :exec
DELETE FROM otpsecrets
WHERE email = ?
`

func (q *Queries) DeleteOtpsecret(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteOtpsecret, email)
	return err
}

const getOtpsecret = `-- name: GetOtpsecret :one
SELECT id, email, secret, tried_times, created_at FROM otpsecrets
WHERE email = ? LIMIT 1
`

func (q *Queries) GetOtpsecret(ctx context.Context, email string) (Otpsecret, error) {
	row := q.db.QueryRowContext(ctx, getOtpsecret, email)
	var i Otpsecret
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Secret,
		&i.TriedTimes,
		&i.CreatedAt,
	)
	return i, err
}
