// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
    user_account, 
    hash_password, 
    username, 
    email, 
    password_chaged_at, 
    created_at
) VALUES (
    ?, ?, ?, ?, DEFAULT, DEFAULT
)
`

type CreateUserParams struct {
	UserAccount  string `json:"user_account"`
	HashPassword string `json:"hash_password"`
	Username     string `json:"username"`
	Email        string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.UserAccount,
		arg.HashPassword,
		arg.Username,
		arg.Email,
	)
}

const getUser = `-- name: GetUser :one
SELECT user_account, hash_password, username, email, password_chaged_at, created_at FROM users
WHERE user_account = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userAccount string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userAccount)
	var i User
	err := row.Scan(
		&i.UserAccount,
		&i.HashPassword,
		&i.Username,
		&i.Email,
		&i.PasswordChagedAt,
		&i.CreatedAt,
	)
	return i, err
}
